// Generated by gencpp from file agent_path_prediction/HumanInfo.msg
// DO NOT EDIT!


#ifndef AGENT_PATH_PREDICTION_MESSAGE_HUMANINFO_H
#define AGENT_PATH_PREDICTION_MESSAGE_HUMANINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agent_path_prediction
{
template <class ContainerAllocator>
struct HumanInfo_
{
  typedef HumanInfo_<ContainerAllocator> Type;

  HumanInfo_()
    : id(0)
    , state(0)
    , dist(0.0)
    , name()  {
    }
  HumanInfo_(const ContainerAllocator& _alloc)
    : id(0)
    , state(0)
    , dist(0.0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int8_t _state_type;
  _state_type state;

   typedef float _dist_type;
  _dist_type dist;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::agent_path_prediction::HumanInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agent_path_prediction::HumanInfo_<ContainerAllocator> const> ConstPtr;

}; // struct HumanInfo_

typedef ::agent_path_prediction::HumanInfo_<std::allocator<void> > HumanInfo;

typedef boost::shared_ptr< ::agent_path_prediction::HumanInfo > HumanInfoPtr;
typedef boost::shared_ptr< ::agent_path_prediction::HumanInfo const> HumanInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agent_path_prediction::HumanInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agent_path_prediction::HumanInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agent_path_prediction::HumanInfo_<ContainerAllocator1> & lhs, const ::agent_path_prediction::HumanInfo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.state == rhs.state &&
    lhs.dist == rhs.dist &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agent_path_prediction::HumanInfo_<ContainerAllocator1> & lhs, const ::agent_path_prediction::HumanInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agent_path_prediction

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agent_path_prediction::HumanInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agent_path_prediction::HumanInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agent_path_prediction::HumanInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agent_path_prediction::HumanInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agent_path_prediction::HumanInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agent_path_prediction::HumanInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agent_path_prediction::HumanInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9b027edfb328a8dba300480146782d2";
  }

  static const char* value(const ::agent_path_prediction::HumanInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9b027edfb328a8dULL;
  static const uint64_t static_value2 = 0xba300480146782d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::agent_path_prediction::HumanInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agent_path_prediction/HumanInfo";
  }

  static const char* value(const ::agent_path_prediction::HumanInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agent_path_prediction::HumanInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32   id\n"
"int8    state\n"
"float32 dist\n"
"string  name\n"
"# geometry_msgs/Twist vel                    \n"
;
  }

  static const char* value(const ::agent_path_prediction::HumanInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agent_path_prediction::HumanInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.state);
      stream.next(m.dist);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HumanInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agent_path_prediction::HumanInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agent_path_prediction::HumanInfo_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.state);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "dist: ";
    Printer<float>::stream(s, indent + "  ", v.dist);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGENT_PATH_PREDICTION_MESSAGE_HUMANINFO_H
