// Generated by gencpp from file agent_path_prediction/PredictedGoals.msg
// DO NOT EDIT!


#ifndef AGENT_PATH_PREDICTION_MESSAGE_PREDICTEDGOALS_H
#define AGENT_PATH_PREDICTION_MESSAGE_PREDICTEDGOALS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <agent_path_prediction/PredictedGoal.h>

namespace agent_path_prediction
{
template <class ContainerAllocator>
struct PredictedGoals_
{
  typedef PredictedGoals_<ContainerAllocator> Type;

  PredictedGoals_()
    : header()
    , goals()  {
    }
  PredictedGoals_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goals(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::agent_path_prediction::PredictedGoal_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::agent_path_prediction::PredictedGoal_<ContainerAllocator> >> _goals_type;
  _goals_type goals;





  typedef boost::shared_ptr< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> const> ConstPtr;

}; // struct PredictedGoals_

typedef ::agent_path_prediction::PredictedGoals_<std::allocator<void> > PredictedGoals;

typedef boost::shared_ptr< ::agent_path_prediction::PredictedGoals > PredictedGoalsPtr;
typedef boost::shared_ptr< ::agent_path_prediction::PredictedGoals const> PredictedGoalsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agent_path_prediction::PredictedGoals_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::agent_path_prediction::PredictedGoals_<ContainerAllocator1> & lhs, const ::agent_path_prediction::PredictedGoals_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goals == rhs.goals;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::agent_path_prediction::PredictedGoals_<ContainerAllocator1> & lhs, const ::agent_path_prediction::PredictedGoals_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace agent_path_prediction

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95cfdad36d575cd6c2bdeb6bf9876c1b";
  }

  static const char* value(const ::agent_path_prediction::PredictedGoals_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95cfdad36d575cd6ULL;
  static const uint64_t static_value2 = 0xc2bdeb6bf9876c1bULL;
};

template<class ContainerAllocator>
struct DataType< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agent_path_prediction/PredictedGoals";
  }

  static const char* value(const ::agent_path_prediction::PredictedGoals_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"PredictedGoal[] goals\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: agent_path_prediction/PredictedGoal\n"
"int32                       id\n"
"geometry_msgs/Pose          goal                                                       \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::agent_path_prediction::PredictedGoals_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goals);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PredictedGoals_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agent_path_prediction::PredictedGoals_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agent_path_prediction::PredictedGoals_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "header: ";
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "goals: ";
    if (v.goals.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.goals.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::agent_path_prediction::PredictedGoal_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.goals[i]);
    }
    if (v.goals.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGENT_PATH_PREDICTION_MESSAGE_PREDICTEDGOALS_H
