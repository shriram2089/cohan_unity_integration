# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cohan_msgs/OptimizeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cohan_msgs.msg
import geometry_msgs.msg
import nav_msgs.msg
import std_msgs.msg

class OptimizeRequest(genpy.Message):
  _md5sum = "2679ebb88e07de77384996672574bc5a"
  _type = "cohan_msgs/OptimizeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Get optimized timed elastic bands for given agents and robot plans

nav_msgs/Path                   robot_plan
cohan_msgs/AgentPathArray       agent_plan_array
int64[]                         agents_ids

================================================================================
MSG: nav_msgs/Path
#An array of poses that represents a Path for a robot to follow
Header header
geometry_msgs/PoseStamped[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: cohan_msgs/AgentPathArray
std_msgs/Header         header
cohan_msgs/AgentPath[]   paths

================================================================================
MSG: cohan_msgs/AgentPath
std_msgs/Header  header
uint64           id
nav_msgs/Path    path
"""
  __slots__ = ['robot_plan','agent_plan_array','agents_ids']
  _slot_types = ['nav_msgs/Path','cohan_msgs/AgentPathArray','int64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_plan,agent_plan_array,agents_ids

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OptimizeRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_plan is None:
        self.robot_plan = nav_msgs.msg.Path()
      if self.agent_plan_array is None:
        self.agent_plan_array = cohan_msgs.msg.AgentPathArray()
      if self.agents_ids is None:
        self.agents_ids = []
    else:
      self.robot_plan = nav_msgs.msg.Path()
      self.agent_plan_array = cohan_msgs.msg.AgentPathArray()
      self.agents_ids = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_plan.header.seq, _x.robot_plan.header.stamp.secs, _x.robot_plan.header.stamp.nsecs))
      _x = self.robot_plan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.robot_plan.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_plan.poses:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v3 = val1.pose
        _v4 = _v3.position
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = _v3.orientation
        _x = _v5
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_3I().pack(_x.agent_plan_array.header.seq, _x.agent_plan_array.header.stamp.secs, _x.agent_plan_array.header.stamp.nsecs))
      _x = self.agent_plan_array.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.agent_plan_array.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.agent_plan_array.paths:
        _v6 = val1.header
        _x = _v6.seq
        buff.write(_get_struct_I().pack(_x))
        _v7 = _v6.stamp
        _x = _v7
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v6.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_Q().pack(_x))
        _v8 = val1.path
        _v9 = _v8.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v8.poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v8.poses:
          _v11 = val3.header
          _x = _v11.seq
          buff.write(_get_struct_I().pack(_x))
          _v12 = _v11.stamp
          _x = _v12
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v11.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v13 = val3.pose
          _v14 = _v13.position
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = _v13.orientation
          _x = _v15
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.agents_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.agents_ids))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robot_plan is None:
        self.robot_plan = nav_msgs.msg.Path()
      if self.agent_plan_array is None:
        self.agent_plan_array = cohan_msgs.msg.AgentPathArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.robot_plan.header.seq, _x.robot_plan.header.stamp.secs, _x.robot_plan.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_plan.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_plan.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_plan.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseStamped()
        _v16 = val1.header
        start = end
        end += 4
        (_v16.seq,) = _get_struct_I().unpack(str[start:end])
        _v17 = _v16.stamp
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v16.frame_id = str[start:end]
        _v18 = val1.pose
        _v19 = _v18.position
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v20 = _v18.orientation
        _x = _v20
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.robot_plan.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.agent_plan_array.header.seq, _x.agent_plan_array.header.stamp.secs, _x.agent_plan_array.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agent_plan_array.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.agent_plan_array.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.agent_plan_array.paths = []
      for i in range(0, length):
        val1 = cohan_msgs.msg.AgentPath()
        _v21 = val1.header
        start = end
        end += 4
        (_v21.seq,) = _get_struct_I().unpack(str[start:end])
        _v22 = _v21.stamp
        _x = _v22
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v21.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v21.frame_id = str[start:end]
        start = end
        end += 8
        (val1.id,) = _get_struct_Q().unpack(str[start:end])
        _v23 = val1.path
        _v24 = _v23.header
        start = end
        end += 4
        (_v24.seq,) = _get_struct_I().unpack(str[start:end])
        _v25 = _v24.stamp
        _x = _v25
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v24.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v24.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v23.poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.PoseStamped()
          _v26 = val3.header
          start = end
          end += 4
          (_v26.seq,) = _get_struct_I().unpack(str[start:end])
          _v27 = _v26.stamp
          _x = _v27
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v26.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v26.frame_id = str[start:end]
          _v28 = val3.pose
          _v29 = _v28.position
          _x = _v29
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v30 = _v28.orientation
          _x = _v30
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v23.poses.append(val3)
        self.agent_plan_array.paths.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.agents_ids = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_plan.header.seq, _x.robot_plan.header.stamp.secs, _x.robot_plan.header.stamp.nsecs))
      _x = self.robot_plan.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.robot_plan.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_plan.poses:
        _v31 = val1.header
        _x = _v31.seq
        buff.write(_get_struct_I().pack(_x))
        _v32 = _v31.stamp
        _x = _v32
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v31.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v33 = val1.pose
        _v34 = _v33.position
        _x = _v34
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v35 = _v33.orientation
        _x = _v35
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_get_struct_3I().pack(_x.agent_plan_array.header.seq, _x.agent_plan_array.header.stamp.secs, _x.agent_plan_array.header.stamp.nsecs))
      _x = self.agent_plan_array.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.agent_plan_array.paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.agent_plan_array.paths:
        _v36 = val1.header
        _x = _v36.seq
        buff.write(_get_struct_I().pack(_x))
        _v37 = _v36.stamp
        _x = _v37
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v36.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.id
        buff.write(_get_struct_Q().pack(_x))
        _v38 = val1.path
        _v39 = _v38.header
        _x = _v39.seq
        buff.write(_get_struct_I().pack(_x))
        _v40 = _v39.stamp
        _x = _v40
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v39.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v38.poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.poses:
          _v41 = val3.header
          _x = _v41.seq
          buff.write(_get_struct_I().pack(_x))
          _v42 = _v41.stamp
          _x = _v42
          buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
          _x = _v41.frame_id
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
          _v43 = val3.pose
          _v44 = _v43.position
          _x = _v44
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v45 = _v43.orientation
          _x = _v45
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.agents_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.agents_ids.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robot_plan is None:
        self.robot_plan = nav_msgs.msg.Path()
      if self.agent_plan_array is None:
        self.agent_plan_array = cohan_msgs.msg.AgentPathArray()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.robot_plan.header.seq, _x.robot_plan.header.stamp.secs, _x.robot_plan.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_plan.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_plan.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_plan.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseStamped()
        _v46 = val1.header
        start = end
        end += 4
        (_v46.seq,) = _get_struct_I().unpack(str[start:end])
        _v47 = _v46.stamp
        _x = _v47
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v46.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v46.frame_id = str[start:end]
        _v48 = val1.pose
        _v49 = _v48.position
        _x = _v49
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v50 = _v48.orientation
        _x = _v50
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        self.robot_plan.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.agent_plan_array.header.seq, _x.agent_plan_array.header.stamp.secs, _x.agent_plan_array.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agent_plan_array.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.agent_plan_array.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.agent_plan_array.paths = []
      for i in range(0, length):
        val1 = cohan_msgs.msg.AgentPath()
        _v51 = val1.header
        start = end
        end += 4
        (_v51.seq,) = _get_struct_I().unpack(str[start:end])
        _v52 = _v51.stamp
        _x = _v52
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v51.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v51.frame_id = str[start:end]
        start = end
        end += 8
        (val1.id,) = _get_struct_Q().unpack(str[start:end])
        _v53 = val1.path
        _v54 = _v53.header
        start = end
        end += 4
        (_v54.seq,) = _get_struct_I().unpack(str[start:end])
        _v55 = _v54.stamp
        _x = _v55
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v54.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v54.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v53.poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.PoseStamped()
          _v56 = val3.header
          start = end
          end += 4
          (_v56.seq,) = _get_struct_I().unpack(str[start:end])
          _v57 = _v56.stamp
          _x = _v57
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            _v56.frame_id = str[start:end].decode('utf-8', 'rosmsg')
          else:
            _v56.frame_id = str[start:end]
          _v58 = val3.pose
          _v59 = _v58.position
          _x = _v59
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v60 = _v58.orientation
          _x = _v60
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v53.poses.append(val3)
        self.agent_plan_array.paths.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.agents_ids = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_Q = None
def _get_struct_Q():
    global _struct_Q
    if _struct_Q is None:
        _struct_Q = struct.Struct("<Q")
    return _struct_Q
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cohan_msgs/OptimizeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cohan_msgs.msg
import genpy
import geometry_msgs.msg

class OptimizeResponse(genpy.Message):
  _md5sum = "a256ad30d56f30dab854b1bd96de2ddf"
  _type = "cohan_msgs/OptimizeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool                            success
string                          message
geometry_msgs/Twist             cmd_vel
cohan_msgs/Trajectory           robot_trajectory
cohan_msgs/AgentTrajectoryArray human_trajectories

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3 linear
Vector3 angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: cohan_msgs/Trajectory
cohan_msgs/TrajectoryPoint[]     points

================================================================================
MSG: cohan_msgs/TrajectoryPoint
geometry_msgs/Pose          pose
geometry_msgs/Twist         velocity
duration                    time_from_start
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: cohan_msgs/AgentTrajectoryArray
cohan_msgs/AgentTrajectory[] trajectories

================================================================================
MSG: cohan_msgs/AgentTrajectory
uint64                  id
int8                    type
cohan_msgs/Trajectory   trajectory
"""
  __slots__ = ['success','message','cmd_vel','robot_trajectory','human_trajectories']
  _slot_types = ['bool','string','geometry_msgs/Twist','cohan_msgs/Trajectory','cohan_msgs/AgentTrajectoryArray']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,message,cmd_vel,robot_trajectory,human_trajectories

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OptimizeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
      if self.cmd_vel is None:
        self.cmd_vel = geometry_msgs.msg.Twist()
      if self.robot_trajectory is None:
        self.robot_trajectory = cohan_msgs.msg.Trajectory()
      if self.human_trajectories is None:
        self.human_trajectories = cohan_msgs.msg.AgentTrajectoryArray()
    else:
      self.success = False
      self.message = ''
      self.cmd_vel = geometry_msgs.msg.Twist()
      self.robot_trajectory = cohan_msgs.msg.Trajectory()
      self.human_trajectories = cohan_msgs.msg.AgentTrajectoryArray()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z))
      length = len(self.robot_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_trajectory.points:
        _v61 = val1.pose
        _v62 = _v61.position
        _x = _v62
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v63 = _v61.orientation
        _x = _v63
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v64 = val1.velocity
        _v65 = _v64.linear
        _x = _v65
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v66 = _v64.angular
        _x = _v66
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v67 = val1.time_from_start
        _x = _v67
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.human_trajectories.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.human_trajectories.trajectories:
        _x = val1
        buff.write(_get_struct_Qb().pack(_x.id, _x.type))
        _v68 = val1.trajectory
        length = len(_v68.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v68.points:
          _v69 = val3.pose
          _v70 = _v69.position
          _x = _v70
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v71 = _v69.orientation
          _x = _v71
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v72 = val3.velocity
          _v73 = _v72.linear
          _x = _v73
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v74 = _v72.angular
          _x = _v74
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v75 = val3.time_from_start
          _x = _v75
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cmd_vel is None:
        self.cmd_vel = geometry_msgs.msg.Twist()
      if self.robot_trajectory is None:
        self.robot_trajectory = cohan_msgs.msg.Trajectory()
      if self.human_trajectories is None:
        self.human_trajectories = cohan_msgs.msg.AgentTrajectoryArray()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_trajectory.points = []
      for i in range(0, length):
        val1 = cohan_msgs.msg.TrajectoryPoint()
        _v76 = val1.pose
        _v77 = _v76.position
        _x = _v77
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v78 = _v76.orientation
        _x = _v78
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v79 = val1.velocity
        _v80 = _v79.linear
        _x = _v80
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v81 = _v79.angular
        _x = _v81
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v82 = val1.time_from_start
        _x = _v82
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.robot_trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human_trajectories.trajectories = []
      for i in range(0, length):
        val1 = cohan_msgs.msg.AgentTrajectory()
        _x = val1
        start = end
        end += 9
        (_x.id, _x.type,) = _get_struct_Qb().unpack(str[start:end])
        _v83 = val1.trajectory
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v83.points = []
        for i in range(0, length):
          val3 = cohan_msgs.msg.TrajectoryPoint()
          _v84 = val3.pose
          _v85 = _v84.position
          _x = _v85
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v86 = _v84.orientation
          _x = _v86
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v87 = val3.velocity
          _v88 = _v87.linear
          _x = _v88
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v89 = _v87.angular
          _x = _v89
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v90 = val3.time_from_start
          _x = _v90
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v83.points.append(val3)
        self.human_trajectories.trajectories.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z))
      length = len(self.robot_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_trajectory.points:
        _v91 = val1.pose
        _v92 = _v91.position
        _x = _v92
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v93 = _v91.orientation
        _x = _v93
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v94 = val1.velocity
        _v95 = _v94.linear
        _x = _v95
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v96 = _v94.angular
        _x = _v96
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v97 = val1.time_from_start
        _x = _v97
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.human_trajectories.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.human_trajectories.trajectories:
        _x = val1
        buff.write(_get_struct_Qb().pack(_x.id, _x.type))
        _v98 = val1.trajectory
        length = len(_v98.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v98.points:
          _v99 = val3.pose
          _v100 = _v99.position
          _x = _v100
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v101 = _v99.orientation
          _x = _v101
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v102 = val3.velocity
          _v103 = _v102.linear
          _x = _v103
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v104 = _v102.angular
          _x = _v104
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v105 = val3.time_from_start
          _x = _v105
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cmd_vel is None:
        self.cmd_vel = geometry_msgs.msg.Twist()
      if self.robot_trajectory is None:
        self.robot_trajectory = cohan_msgs.msg.Trajectory()
      if self.human_trajectories is None:
        self.human_trajectories = cohan_msgs.msg.AgentTrajectoryArray()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_trajectory.points = []
      for i in range(0, length):
        val1 = cohan_msgs.msg.TrajectoryPoint()
        _v106 = val1.pose
        _v107 = _v106.position
        _x = _v107
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v108 = _v106.orientation
        _x = _v108
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v109 = val1.velocity
        _v110 = _v109.linear
        _x = _v110
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v111 = _v109.angular
        _x = _v111
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v112 = val1.time_from_start
        _x = _v112
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.robot_trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human_trajectories.trajectories = []
      for i in range(0, length):
        val1 = cohan_msgs.msg.AgentTrajectory()
        _x = val1
        start = end
        end += 9
        (_x.id, _x.type,) = _get_struct_Qb().unpack(str[start:end])
        _v113 = val1.trajectory
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v113.points = []
        for i in range(0, length):
          val3 = cohan_msgs.msg.TrajectoryPoint()
          _v114 = val3.pose
          _v115 = _v114.position
          _x = _v115
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v116 = _v114.orientation
          _x = _v116
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v117 = val3.velocity
          _v118 = _v117.linear
          _x = _v118
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v119 = _v117.angular
          _x = _v119
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v120 = val3.time_from_start
          _x = _v120
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v113.points.append(val3)
        self.human_trajectories.trajectories.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Qb = None
def _get_struct_Qb():
    global _struct_Qb
    if _struct_Qb is None:
        _struct_Qb = struct.Struct("<Qb")
    return _struct_Qb
class Optimize(object):
  _type          = 'cohan_msgs/Optimize'
  _md5sum = '268314f168a8e54386e219ff71892d27'
  _request_class  = OptimizeRequest
  _response_class = OptimizeResponse
