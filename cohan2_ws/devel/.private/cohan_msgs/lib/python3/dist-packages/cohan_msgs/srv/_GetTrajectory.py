# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cohan_msgs/GetTrajectoryRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GetTrajectoryRequest(genpy.Message):
  _md5sum = "346b7293cabc7e2ae4cd242f4f13eff3"
  _type = "cohan_msgs/GetTrajectoryRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/PoseStamped       robot_goal
int64[]                         agents_ids

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['robot_goal','agents_ids']
  _slot_types = ['geometry_msgs/PoseStamped','int64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_goal,agents_ids

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTrajectoryRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_goal is None:
        self.robot_goal = geometry_msgs.msg.PoseStamped()
      if self.agents_ids is None:
        self.agents_ids = []
    else:
      self.robot_goal = geometry_msgs.msg.PoseStamped()
      self.agents_ids = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_goal.header.seq, _x.robot_goal.header.stamp.secs, _x.robot_goal.header.stamp.nsecs))
      _x = self.robot_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.robot_goal.pose.position.x, _x.robot_goal.pose.position.y, _x.robot_goal.pose.position.z, _x.robot_goal.pose.orientation.x, _x.robot_goal.pose.orientation.y, _x.robot_goal.pose.orientation.z, _x.robot_goal.pose.orientation.w))
      length = len(self.agents_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(struct.Struct(pattern).pack(*self.agents_ids))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robot_goal is None:
        self.robot_goal = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.robot_goal.header.seq, _x.robot_goal.header.stamp.secs, _x.robot_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.robot_goal.pose.position.x, _x.robot_goal.pose.position.y, _x.robot_goal.pose.position.z, _x.robot_goal.pose.orientation.x, _x.robot_goal.pose.orientation.y, _x.robot_goal.pose.orientation.z, _x.robot_goal.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.agents_ids = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.robot_goal.header.seq, _x.robot_goal.header.stamp.secs, _x.robot_goal.header.stamp.nsecs))
      _x = self.robot_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.robot_goal.pose.position.x, _x.robot_goal.pose.position.y, _x.robot_goal.pose.position.z, _x.robot_goal.pose.orientation.x, _x.robot_goal.pose.orientation.y, _x.robot_goal.pose.orientation.z, _x.robot_goal.pose.orientation.w))
      length = len(self.agents_ids)
      buff.write(_struct_I.pack(length))
      pattern = '<%sq'%length
      buff.write(self.agents_ids.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.robot_goal is None:
        self.robot_goal = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.robot_goal.header.seq, _x.robot_goal.header.stamp.secs, _x.robot_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.robot_goal.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.robot_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.robot_goal.pose.position.x, _x.robot_goal.pose.position.y, _x.robot_goal.pose.position.z, _x.robot_goal.pose.orientation.x, _x.robot_goal.pose.orientation.y, _x.robot_goal.pose.orientation.z, _x.robot_goal.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sq'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.agents_ids = numpy.frombuffer(str[start:end], dtype=numpy.int64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from cohan_msgs/GetTrajectoryResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cohan_msgs.msg
import genpy
import geometry_msgs.msg

class GetTrajectoryResponse(genpy.Message):
  _md5sum = "a256ad30d56f30dab854b1bd96de2ddf"
  _type = "cohan_msgs/GetTrajectoryResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool                            success
string                          message
geometry_msgs/Twist             cmd_vel
cohan_msgs/Trajectory           robot_trajectory
cohan_msgs/AgentTrajectoryArray human_trajectories 

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3 linear
Vector3 angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: cohan_msgs/Trajectory
cohan_msgs/TrajectoryPoint[]     points

================================================================================
MSG: cohan_msgs/TrajectoryPoint
geometry_msgs/Pose          pose
geometry_msgs/Twist         velocity
duration                    time_from_start
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: cohan_msgs/AgentTrajectoryArray
cohan_msgs/AgentTrajectory[] trajectories

================================================================================
MSG: cohan_msgs/AgentTrajectory
uint64                  id
int8                    type
cohan_msgs/Trajectory   trajectory
"""
  __slots__ = ['success','message','cmd_vel','robot_trajectory','human_trajectories']
  _slot_types = ['bool','string','geometry_msgs/Twist','cohan_msgs/Trajectory','cohan_msgs/AgentTrajectoryArray']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,message,cmd_vel,robot_trajectory,human_trajectories

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTrajectoryResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
      if self.cmd_vel is None:
        self.cmd_vel = geometry_msgs.msg.Twist()
      if self.robot_trajectory is None:
        self.robot_trajectory = cohan_msgs.msg.Trajectory()
      if self.human_trajectories is None:
        self.human_trajectories = cohan_msgs.msg.AgentTrajectoryArray()
    else:
      self.success = False
      self.message = ''
      self.cmd_vel = geometry_msgs.msg.Twist()
      self.robot_trajectory = cohan_msgs.msg.Trajectory()
      self.human_trajectories = cohan_msgs.msg.AgentTrajectoryArray()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z))
      length = len(self.robot_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_trajectory.points:
        _v1 = val1.pose
        _v2 = _v1.position
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v3 = _v1.orientation
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v4 = val1.velocity
        _v5 = _v4.linear
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = _v4.angular
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = val1.time_from_start
        _x = _v7
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.human_trajectories.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.human_trajectories.trajectories:
        _x = val1
        buff.write(_get_struct_Qb().pack(_x.id, _x.type))
        _v8 = val1.trajectory
        length = len(_v8.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v8.points:
          _v9 = val3.pose
          _v10 = _v9.position
          _x = _v10
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v11 = _v9.orientation
          _x = _v11
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v12 = val3.velocity
          _v13 = _v12.linear
          _x = _v13
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v14 = _v12.angular
          _x = _v14
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v15 = val3.time_from_start
          _x = _v15
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cmd_vel is None:
        self.cmd_vel = geometry_msgs.msg.Twist()
      if self.robot_trajectory is None:
        self.robot_trajectory = cohan_msgs.msg.Trajectory()
      if self.human_trajectories is None:
        self.human_trajectories = cohan_msgs.msg.AgentTrajectoryArray()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_trajectory.points = []
      for i in range(0, length):
        val1 = cohan_msgs.msg.TrajectoryPoint()
        _v16 = val1.pose
        _v17 = _v16.position
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v18 = _v16.orientation
        _x = _v18
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v19 = val1.velocity
        _v20 = _v19.linear
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v21 = _v19.angular
        _x = _v21
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v22 = val1.time_from_start
        _x = _v22
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.robot_trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human_trajectories.trajectories = []
      for i in range(0, length):
        val1 = cohan_msgs.msg.AgentTrajectory()
        _x = val1
        start = end
        end += 9
        (_x.id, _x.type,) = _get_struct_Qb().unpack(str[start:end])
        _v23 = val1.trajectory
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v23.points = []
        for i in range(0, length):
          val3 = cohan_msgs.msg.TrajectoryPoint()
          _v24 = val3.pose
          _v25 = _v24.position
          _x = _v25
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v26 = _v24.orientation
          _x = _v26
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v27 = val3.velocity
          _v28 = _v27.linear
          _x = _v28
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v29 = _v27.angular
          _x = _v29
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v30 = val3.time_from_start
          _x = _v30
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v23.points.append(val3)
        self.human_trajectories.trajectories.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z))
      length = len(self.robot_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.robot_trajectory.points:
        _v31 = val1.pose
        _v32 = _v31.position
        _x = _v32
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v33 = _v31.orientation
        _x = _v33
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v34 = val1.velocity
        _v35 = _v34.linear
        _x = _v35
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v36 = _v34.angular
        _x = _v36
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v37 = val1.time_from_start
        _x = _v37
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      length = len(self.human_trajectories.trajectories)
      buff.write(_struct_I.pack(length))
      for val1 in self.human_trajectories.trajectories:
        _x = val1
        buff.write(_get_struct_Qb().pack(_x.id, _x.type))
        _v38 = val1.trajectory
        length = len(_v38.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v38.points:
          _v39 = val3.pose
          _v40 = _v39.position
          _x = _v40
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v41 = _v39.orientation
          _x = _v41
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
          _v42 = val3.velocity
          _v43 = _v42.linear
          _x = _v43
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v44 = _v42.angular
          _x = _v44
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v45 = val3.time_from_start
          _x = _v45
          buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cmd_vel is None:
        self.cmd_vel = geometry_msgs.msg.Twist()
      if self.robot_trajectory is None:
        self.robot_trajectory = cohan_msgs.msg.Trajectory()
      if self.human_trajectories is None:
        self.human_trajectories = cohan_msgs.msg.AgentTrajectoryArray()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.cmd_vel.linear.x, _x.cmd_vel.linear.y, _x.cmd_vel.linear.z, _x.cmd_vel.angular.x, _x.cmd_vel.angular.y, _x.cmd_vel.angular.z,) = _get_struct_6d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.robot_trajectory.points = []
      for i in range(0, length):
        val1 = cohan_msgs.msg.TrajectoryPoint()
        _v46 = val1.pose
        _v47 = _v46.position
        _x = _v47
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v48 = _v46.orientation
        _x = _v48
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v49 = val1.velocity
        _v50 = _v49.linear
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v51 = _v49.angular
        _x = _v51
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v52 = val1.time_from_start
        _x = _v52
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.robot_trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.human_trajectories.trajectories = []
      for i in range(0, length):
        val1 = cohan_msgs.msg.AgentTrajectory()
        _x = val1
        start = end
        end += 9
        (_x.id, _x.type,) = _get_struct_Qb().unpack(str[start:end])
        _v53 = val1.trajectory
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v53.points = []
        for i in range(0, length):
          val3 = cohan_msgs.msg.TrajectoryPoint()
          _v54 = val3.pose
          _v55 = _v54.position
          _x = _v55
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v56 = _v54.orientation
          _x = _v56
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          _v57 = val3.velocity
          _v58 = _v57.linear
          _x = _v58
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v59 = _v57.angular
          _x = _v59
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v60 = val3.time_from_start
          _x = _v60
          start = end
          end += 8
          (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
          _v53.points.append(val3)
        self.human_trajectories.trajectories.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_Qb = None
def _get_struct_Qb():
    global _struct_Qb
    if _struct_Qb is None:
        _struct_Qb = struct.Struct("<Qb")
    return _struct_Qb
class GetTrajectory(object):
  _type          = 'cohan_msgs/GetTrajectory'
  _md5sum = 'b06ef2124717e19c8dcfad526f6c1f42'
  _request_class  = GetTrajectoryRequest
  _response_class = GetTrajectoryResponse
