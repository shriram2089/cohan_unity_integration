// Generated by gencpp from file cohan_msgs/AgentTrajectoryArray.msg
// DO NOT EDIT!


#ifndef COHAN_MSGS_MESSAGE_AGENTTRAJECTORYARRAY_H
#define COHAN_MSGS_MESSAGE_AGENTTRAJECTORYARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <cohan_msgs/AgentTrajectory.h>

namespace cohan_msgs
{
template <class ContainerAllocator>
struct AgentTrajectoryArray_
{
  typedef AgentTrajectoryArray_<ContainerAllocator> Type;

  AgentTrajectoryArray_()
    : trajectories()  {
    }
  AgentTrajectoryArray_(const ContainerAllocator& _alloc)
    : trajectories(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::cohan_msgs::AgentTrajectory_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cohan_msgs::AgentTrajectory_<ContainerAllocator> >> _trajectories_type;
  _trajectories_type trajectories;





  typedef boost::shared_ptr< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> const> ConstPtr;

}; // struct AgentTrajectoryArray_

typedef ::cohan_msgs::AgentTrajectoryArray_<std::allocator<void> > AgentTrajectoryArray;

typedef boost::shared_ptr< ::cohan_msgs::AgentTrajectoryArray > AgentTrajectoryArrayPtr;
typedef boost::shared_ptr< ::cohan_msgs::AgentTrajectoryArray const> AgentTrajectoryArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator1> & lhs, const ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator2> & rhs)
{
  return lhs.trajectories == rhs.trajectories;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator1> & lhs, const ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc752f4d73f4b5b2a3a6c7deb72dd0c9";
  }

  static const char* value(const ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc752f4d73f4b5b2ULL;
  static const uint64_t static_value2 = 0xa3a6c7deb72dd0c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_msgs/AgentTrajectoryArray";
  }

  static const char* value(const ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_msgs/AgentTrajectory[] trajectories\n"
"\n"
"================================================================================\n"
"MSG: cohan_msgs/AgentTrajectory\n"
"uint64                  id\n"
"int8                    type\n"
"cohan_msgs/Trajectory   trajectory\n"
"\n"
"================================================================================\n"
"MSG: cohan_msgs/Trajectory\n"
"cohan_msgs/TrajectoryPoint[]     points\n"
"\n"
"================================================================================\n"
"MSG: cohan_msgs/TrajectoryPoint\n"
"geometry_msgs/Pose          pose\n"
"geometry_msgs/Twist         velocity\n"
"duration                    time_from_start\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3 linear\n"
"Vector3 angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.trajectories);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AgentTrajectoryArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "trajectories: ";
    if (v.trajectories.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.trajectories.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::cohan_msgs::AgentTrajectory_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.trajectories[i]);
    }
    if (v.trajectories.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHAN_MSGS_MESSAGE_AGENTTRAJECTORYARRAY_H
