// Generated by gencpp from file cohan_msgs/OptimizeRequest.msg
// DO NOT EDIT!


#ifndef COHAN_MSGS_MESSAGE_OPTIMIZEREQUEST_H
#define COHAN_MSGS_MESSAGE_OPTIMIZEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/Path.h>
#include <cohan_msgs/AgentPathArray.h>

namespace cohan_msgs
{
template <class ContainerAllocator>
struct OptimizeRequest_
{
  typedef OptimizeRequest_<ContainerAllocator> Type;

  OptimizeRequest_()
    : robot_plan()
    , agent_plan_array()
    , agents_ids()  {
    }
  OptimizeRequest_(const ContainerAllocator& _alloc)
    : robot_plan(_alloc)
    , agent_plan_array(_alloc)
    , agents_ids(_alloc)  {
  (void)_alloc;
    }



   typedef  ::nav_msgs::Path_<ContainerAllocator>  _robot_plan_type;
  _robot_plan_type robot_plan;

   typedef  ::cohan_msgs::AgentPathArray_<ContainerAllocator>  _agent_plan_array_type;
  _agent_plan_array_type agent_plan_array;

   typedef std::vector<int64_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int64_t>> _agents_ids_type;
  _agents_ids_type agents_ids;





  typedef boost::shared_ptr< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OptimizeRequest_

typedef ::cohan_msgs::OptimizeRequest_<std::allocator<void> > OptimizeRequest;

typedef boost::shared_ptr< ::cohan_msgs::OptimizeRequest > OptimizeRequestPtr;
typedef boost::shared_ptr< ::cohan_msgs::OptimizeRequest const> OptimizeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohan_msgs::OptimizeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohan_msgs::OptimizeRequest_<ContainerAllocator1> & lhs, const ::cohan_msgs::OptimizeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.robot_plan == rhs.robot_plan &&
    lhs.agent_plan_array == rhs.agent_plan_array &&
    lhs.agents_ids == rhs.agents_ids;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohan_msgs::OptimizeRequest_<ContainerAllocator1> & lhs, const ::cohan_msgs::OptimizeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2679ebb88e07de77384996672574bc5a";
  }

  static const char* value(const ::cohan_msgs::OptimizeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2679ebb88e07de77ULL;
  static const uint64_t static_value2 = 0x384996672574bc5aULL;
};

template<class ContainerAllocator>
struct DataType< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_msgs/OptimizeRequest";
  }

  static const char* value(const ::cohan_msgs::OptimizeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Get optimized timed elastic bands for given agents and robot plans\n"
"\n"
"nav_msgs/Path                   robot_plan\n"
"cohan_msgs/AgentPathArray       agent_plan_array\n"
"int64[]                         agents_ids\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Path\n"
"#An array of poses that represents a Path for a robot to follow\n"
"Header header\n"
"geometry_msgs/PoseStamped[] poses\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: cohan_msgs/AgentPathArray\n"
"std_msgs/Header         header\n"
"cohan_msgs/AgentPath[]   paths\n"
"\n"
"================================================================================\n"
"MSG: cohan_msgs/AgentPath\n"
"std_msgs/Header  header\n"
"uint64           id\n"
"nav_msgs/Path    path\n"
;
  }

  static const char* value(const ::cohan_msgs::OptimizeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_plan);
      stream.next(m.agent_plan_array);
      stream.next(m.agents_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptimizeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohan_msgs::OptimizeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohan_msgs::OptimizeRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "robot_plan: ";
    Printer< ::nav_msgs::Path_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_plan);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "agent_plan_array: ";
    Printer< ::cohan_msgs::AgentPathArray_<ContainerAllocator> >::stream(s, indent + "  ", v.agent_plan_array);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "agents_ids: ";
    if (v.agents_ids.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.agents_ids.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int64_t>::stream(s, true ? std::string() : indent + "    ", v.agents_ids[i]);
    }
    if (v.agents_ids.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHAN_MSGS_MESSAGE_OPTIMIZEREQUEST_H
