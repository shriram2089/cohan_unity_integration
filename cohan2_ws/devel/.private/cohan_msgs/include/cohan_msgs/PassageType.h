// Generated by gencpp from file cohan_msgs/PassageType.msg
// DO NOT EDIT!


#ifndef COHAN_MSGS_MESSAGE_PASSAGETYPE_H
#define COHAN_MSGS_MESSAGE_PASSAGETYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cohan_msgs
{
template <class ContainerAllocator>
struct PassageType_
{
  typedef PassageType_<ContainerAllocator> Type;

  PassageType_()
    : type(0)  {
    }
  PassageType_(const ContainerAllocator& _alloc)
    : type(0)  {
  (void)_alloc;
    }



   typedef int8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OPEN)
  #undef OPEN
#endif
#if defined(_WIN32) && defined(DOOR)
  #undef DOOR
#endif
#if defined(_WIN32) && defined(PILLAR)
  #undef PILLAR
#endif
#if defined(_WIN32) && defined(WALL)
  #undef WALL
#endif

  enum {
    OPEN = 0,
    DOOR = 1,
    PILLAR = 2,
    WALL = 3,
  };


  typedef boost::shared_ptr< ::cohan_msgs::PassageType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohan_msgs::PassageType_<ContainerAllocator> const> ConstPtr;

}; // struct PassageType_

typedef ::cohan_msgs::PassageType_<std::allocator<void> > PassageType;

typedef boost::shared_ptr< ::cohan_msgs::PassageType > PassageTypePtr;
typedef boost::shared_ptr< ::cohan_msgs::PassageType const> PassageTypeConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohan_msgs::PassageType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohan_msgs::PassageType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohan_msgs::PassageType_<ContainerAllocator1> & lhs, const ::cohan_msgs::PassageType_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohan_msgs::PassageType_<ContainerAllocator1> & lhs, const ::cohan_msgs::PassageType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::PassageType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::PassageType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::PassageType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::PassageType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::PassageType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::PassageType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohan_msgs::PassageType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "13e6510bc35715bfa6e5fca9e28a30ac";
  }

  static const char* value(const ::cohan_msgs::PassageType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x13e6510bc35715bfULL;
  static const uint64_t static_value2 = 0xa6e5fca9e28a30acULL;
};

template<class ContainerAllocator>
struct DataType< ::cohan_msgs::PassageType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_msgs/PassageType";
  }

  static const char* value(const ::cohan_msgs::PassageType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohan_msgs::PassageType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 OPEN=0\n"
"int8 DOOR=1\n"
"int8 PILLAR=2\n"
"int8 WALL=3\n"
"\n"
"int8 type\n"
;
  }

  static const char* value(const ::cohan_msgs::PassageType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohan_msgs::PassageType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PassageType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohan_msgs::PassageType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohan_msgs::PassageType_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHAN_MSGS_MESSAGE_PASSAGETYPE_H
