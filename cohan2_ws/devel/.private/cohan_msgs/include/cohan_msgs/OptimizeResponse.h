// Generated by gencpp from file cohan_msgs/OptimizeResponse.msg
// DO NOT EDIT!


#ifndef COHAN_MSGS_MESSAGE_OPTIMIZERESPONSE_H
#define COHAN_MSGS_MESSAGE_OPTIMIZERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>
#include <cohan_msgs/Trajectory.h>
#include <cohan_msgs/AgentTrajectoryArray.h>

namespace cohan_msgs
{
template <class ContainerAllocator>
struct OptimizeResponse_
{
  typedef OptimizeResponse_<ContainerAllocator> Type;

  OptimizeResponse_()
    : success(false)
    , message()
    , cmd_vel()
    , robot_trajectory()
    , human_trajectories()  {
    }
  OptimizeResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , message(_alloc)
    , cmd_vel(_alloc)
    , robot_trajectory(_alloc)
    , human_trajectories(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _cmd_vel_type;
  _cmd_vel_type cmd_vel;

   typedef  ::cohan_msgs::Trajectory_<ContainerAllocator>  _robot_trajectory_type;
  _robot_trajectory_type robot_trajectory;

   typedef  ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator>  _human_trajectories_type;
  _human_trajectories_type human_trajectories;





  typedef boost::shared_ptr< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> const> ConstPtr;

}; // struct OptimizeResponse_

typedef ::cohan_msgs::OptimizeResponse_<std::allocator<void> > OptimizeResponse;

typedef boost::shared_ptr< ::cohan_msgs::OptimizeResponse > OptimizeResponsePtr;
typedef boost::shared_ptr< ::cohan_msgs::OptimizeResponse const> OptimizeResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohan_msgs::OptimizeResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohan_msgs::OptimizeResponse_<ContainerAllocator1> & lhs, const ::cohan_msgs::OptimizeResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.message == rhs.message &&
    lhs.cmd_vel == rhs.cmd_vel &&
    lhs.robot_trajectory == rhs.robot_trajectory &&
    lhs.human_trajectories == rhs.human_trajectories;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohan_msgs::OptimizeResponse_<ContainerAllocator1> & lhs, const ::cohan_msgs::OptimizeResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a256ad30d56f30dab854b1bd96de2ddf";
  }

  static const char* value(const ::cohan_msgs::OptimizeResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa256ad30d56f30daULL;
  static const uint64_t static_value2 = 0xb854b1bd96de2ddfULL;
};

template<class ContainerAllocator>
struct DataType< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_msgs/OptimizeResponse";
  }

  static const char* value(const ::cohan_msgs::OptimizeResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool                            success\n"
"string                          message\n"
"geometry_msgs/Twist             cmd_vel\n"
"cohan_msgs/Trajectory           robot_trajectory\n"
"cohan_msgs/AgentTrajectoryArray human_trajectories\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3 linear\n"
"Vector3 angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: cohan_msgs/Trajectory\n"
"cohan_msgs/TrajectoryPoint[]     points\n"
"\n"
"================================================================================\n"
"MSG: cohan_msgs/TrajectoryPoint\n"
"geometry_msgs/Pose          pose\n"
"geometry_msgs/Twist         velocity\n"
"duration                    time_from_start\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: cohan_msgs/AgentTrajectoryArray\n"
"cohan_msgs/AgentTrajectory[] trajectories\n"
"\n"
"================================================================================\n"
"MSG: cohan_msgs/AgentTrajectory\n"
"uint64                  id\n"
"int8                    type\n"
"cohan_msgs/Trajectory   trajectory\n"
;
  }

  static const char* value(const ::cohan_msgs::OptimizeResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.cmd_vel);
      stream.next(m.robot_trajectory);
      stream.next(m.human_trajectories);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OptimizeResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohan_msgs::OptimizeResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohan_msgs::OptimizeResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "cmd_vel: ";
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.cmd_vel);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "robot_trajectory: ";
    Printer< ::cohan_msgs::Trajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_trajectory);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "human_trajectories: ";
    Printer< ::cohan_msgs::AgentTrajectoryArray_<ContainerAllocator> >::stream(s, indent + "  ", v.human_trajectories);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHAN_MSGS_MESSAGE_OPTIMIZERESPONSE_H
