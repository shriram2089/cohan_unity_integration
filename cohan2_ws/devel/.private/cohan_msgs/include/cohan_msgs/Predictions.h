// Generated by gencpp from file cohan_msgs/Predictions.msg
// DO NOT EDIT!


#ifndef COHAN_MSGS_MESSAGE_PREDICTIONS_H
#define COHAN_MSGS_MESSAGE_PREDICTIONS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/Float32MultiArray.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Float32.h>

namespace cohan_msgs
{
template <class ContainerAllocator>
struct Predictions_
{
  typedef Predictions_<ContainerAllocator> Type;

  Predictions_()
    : predictions()
    , logits()
    , num_agents()
    , history_length()
    , window_length()
    , max_agents()
    , timestep()  {
    }
  Predictions_(const ContainerAllocator& _alloc)
    : predictions(_alloc)
    , logits(_alloc)
    , num_agents(_alloc)
    , history_length(_alloc)
    , window_length(_alloc)
    , max_agents(_alloc)
    , timestep(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _predictions_type;
  _predictions_type predictions;

   typedef  ::std_msgs::Float32MultiArray_<ContainerAllocator>  _logits_type;
  _logits_type logits;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _num_agents_type;
  _num_agents_type num_agents;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _history_length_type;
  _history_length_type history_length;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _window_length_type;
  _window_length_type window_length;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _max_agents_type;
  _max_agents_type max_agents;

   typedef  ::std_msgs::Float32_<ContainerAllocator>  _timestep_type;
  _timestep_type timestep;





  typedef boost::shared_ptr< ::cohan_msgs::Predictions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohan_msgs::Predictions_<ContainerAllocator> const> ConstPtr;

}; // struct Predictions_

typedef ::cohan_msgs::Predictions_<std::allocator<void> > Predictions;

typedef boost::shared_ptr< ::cohan_msgs::Predictions > PredictionsPtr;
typedef boost::shared_ptr< ::cohan_msgs::Predictions const> PredictionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohan_msgs::Predictions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohan_msgs::Predictions_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohan_msgs::Predictions_<ContainerAllocator1> & lhs, const ::cohan_msgs::Predictions_<ContainerAllocator2> & rhs)
{
  return lhs.predictions == rhs.predictions &&
    lhs.logits == rhs.logits &&
    lhs.num_agents == rhs.num_agents &&
    lhs.history_length == rhs.history_length &&
    lhs.window_length == rhs.window_length &&
    lhs.max_agents == rhs.max_agents &&
    lhs.timestep == rhs.timestep;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohan_msgs::Predictions_<ContainerAllocator1> & lhs, const ::cohan_msgs::Predictions_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::Predictions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohan_msgs::Predictions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::Predictions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_msgs::Predictions_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::Predictions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_msgs::Predictions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohan_msgs::Predictions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89017311e456121f144e6ec3ffe1e699";
  }

  static const char* value(const ::cohan_msgs::Predictions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89017311e456121fULL;
  static const uint64_t static_value2 = 0x144e6ec3ffe1e699ULL;
};

template<class ContainerAllocator>
struct DataType< ::cohan_msgs::Predictions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_msgs/Predictions";
  }

  static const char* value(const ::cohan_msgs::Predictions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohan_msgs::Predictions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Float32MultiArray predictions\n"
"std_msgs/Float32MultiArray logits\n"
"std_msgs/Int32 num_agents\n"
"std_msgs/Int32 history_length\n"
"std_msgs/Int32 window_length\n"
"std_msgs/Int32 max_agents\n"
"std_msgs/Float32 timestep\n"
"================================================================================\n"
"MSG: std_msgs/Float32MultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"float32[]         data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
"================================================================================\n"
"MSG: std_msgs/Int32\n"
"int32 data\n"
"================================================================================\n"
"MSG: std_msgs/Float32\n"
"float32 data\n"
;
  }

  static const char* value(const ::cohan_msgs::Predictions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohan_msgs::Predictions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.predictions);
      stream.next(m.logits);
      stream.next(m.num_agents);
      stream.next(m.history_length);
      stream.next(m.window_length);
      stream.next(m.max_agents);
      stream.next(m.timestep);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Predictions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohan_msgs::Predictions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohan_msgs::Predictions_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "predictions: ";
    Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.predictions);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "logits: ";
    Printer< ::std_msgs::Float32MultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.logits);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "num_agents: ";
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.num_agents);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "history_length: ";
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.history_length);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "window_length: ";
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.window_length);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "max_agents: ";
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.max_agents);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "timestep: ";
    Printer< ::std_msgs::Float32_<ContainerAllocator> >::stream(s, indent + "  ", v.timestep);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHAN_MSGS_MESSAGE_PREDICTIONS_H
