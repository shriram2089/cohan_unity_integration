// Generated by gencpp from file hateb_local_planner/PlanningMode.msg
// DO NOT EDIT!


#ifndef HATEB_LOCAL_PLANNER_MESSAGE_PLANNINGMODE_H
#define HATEB_LOCAL_PLANNER_MESSAGE_PLANNINGMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hateb_local_planner
{
template <class ContainerAllocator>
struct PlanningMode_
{
  typedef PlanningMode_<ContainerAllocator> Type;

  PlanningMode_()
    : plan_mode(0)
    , predict_mode(0)
    , moving_humans()
    , still_humans()  {
    }
  PlanningMode_(const ContainerAllocator& _alloc)
    : plan_mode(0)
    , predict_mode(0)
    , moving_humans(_alloc)
    , still_humans(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _plan_mode_type;
  _plan_mode_type plan_mode;

   typedef int8_t _predict_mode_type;
  _predict_mode_type predict_mode;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _moving_humans_type;
  _moving_humans_type moving_humans;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _still_humans_type;
  _still_humans_type still_humans;





  typedef boost::shared_ptr< ::hateb_local_planner::PlanningMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hateb_local_planner::PlanningMode_<ContainerAllocator> const> ConstPtr;

}; // struct PlanningMode_

typedef ::hateb_local_planner::PlanningMode_<std::allocator<void> > PlanningMode;

typedef boost::shared_ptr< ::hateb_local_planner::PlanningMode > PlanningModePtr;
typedef boost::shared_ptr< ::hateb_local_planner::PlanningMode const> PlanningModeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hateb_local_planner::PlanningMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hateb_local_planner::PlanningMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hateb_local_planner::PlanningMode_<ContainerAllocator1> & lhs, const ::hateb_local_planner::PlanningMode_<ContainerAllocator2> & rhs)
{
  return lhs.plan_mode == rhs.plan_mode &&
    lhs.predict_mode == rhs.predict_mode &&
    lhs.moving_humans == rhs.moving_humans &&
    lhs.still_humans == rhs.still_humans;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hateb_local_planner::PlanningMode_<ContainerAllocator1> & lhs, const ::hateb_local_planner::PlanningMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hateb_local_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hateb_local_planner::PlanningMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hateb_local_planner::PlanningMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hateb_local_planner::PlanningMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hateb_local_planner::PlanningMode_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hateb_local_planner::PlanningMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hateb_local_planner::PlanningMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hateb_local_planner::PlanningMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee45c05d7fb63156ab0e68657c7bc8e3";
  }

  static const char* value(const ::hateb_local_planner::PlanningMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee45c05d7fb63156ULL;
  static const uint64_t static_value2 = 0xab0e68657c7bc8e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::hateb_local_planner::PlanningMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hateb_local_planner/PlanningMode";
  }

  static const char* value(const ::hateb_local_planner::PlanningMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hateb_local_planner::PlanningMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8    plan_mode\n"
"int8    predict_mode\n"
"int32[] moving_humans\n"
"int32[] still_humans\n"
;
  }

  static const char* value(const ::hateb_local_planner::PlanningMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hateb_local_planner::PlanningMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plan_mode);
      stream.next(m.predict_mode);
      stream.next(m.moving_humans);
      stream.next(m.still_humans);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanningMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hateb_local_planner::PlanningMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hateb_local_planner::PlanningMode_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "plan_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.plan_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "predict_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.predict_mode);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "moving_humans: ";
    if (v.moving_humans.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.moving_humans.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int32_t>::stream(s, true ? std::string() : indent + "    ", v.moving_humans[i]);
    }
    if (v.moving_humans.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "still_humans: ";
    if (v.still_humans.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.still_humans.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<int32_t>::stream(s, true ? std::string() : indent + "    ", v.still_humans[i]);
    }
    if (v.still_humans.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // HATEB_LOCAL_PLANNER_MESSAGE_PLANNINGMODE_H
