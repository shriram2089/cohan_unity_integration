# Autogenerated param section. Do not hand edit.
param {
group.0 {
name=Dynamically Reconfigurable Parameters
desc=See the [[dynamic_reconfigure]] package for details on dynamically reconfigurable parameters.
0.name= ~teb_autosize
0.default= True
0.type= bool
0.desc=Enable the automatic resizing of the trajectory during optimization (based on the temporal resolution of the trajectory, recommended) 
1.name= ~dt_ref
1.default= 0.3
1.type= double
1.desc=Temporal resolution of the planned trajectory (usually it is set to the magnitude of the 1/control_rate) Range: 0.01 to 1.0
2.name= ~dt_hysteresis
2.default= 0.1
2.type= double
2.desc=Hysteresis that is utilized for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref Range: 0.002 to 0.5
3.name= ~global_plan_overwrite_orientation
3.default= True
3.type= bool
3.desc=Some global planners are not considering the orientation at local subgoals between start and global goal, therefore determine it automatically 
4.name= ~allow_init_with_backwards_motion
4.default= False
4.type= bool
4.desc=If true, the underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors) 
5.name= ~max_global_plan_lookahead_dist
5.default= 3.0
5.type= double
5.desc=Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size] Range: 0.0 to 50.0
6.name= ~force_reinit_new_goal_dist
6.default= 1.0
6.type= double
6.desc=Force the planner to reinitialize the trajectory if a previous goal is updated with a seperation of more than the specified value in meters (skip hot-starting) Range: 0.0 to 10.0
7.name= ~force_reinit_new_goal_angular
7.default= 0.78
7.type= double
7.desc=Force the planner to reinitialize the trajectory if a previous goal is updated with a rotational difference of more than the specified value in radians (skip hot-starting) Range: 0.0 to 4.0
8.name= ~feasibility_check_no_poses
8.default= 5
8.type= int
8.desc=Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval Range: 0 to 50
9.name= ~exact_arc_length
9.default= False
9.type= bool
9.desc=If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations [-> increased cpu time], otherwise the euclidean approximation is used. 
10.name= ~publish_feedback
10.default= False
10.type= bool
10.desc=Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging purposes) 
11.name= ~visualize_with_time_as_z_axis_scale
11.default= 0.0
11.type= double
11.desc=If this value is bigger than 0, the trajectory and obstacles are visualized in 3d using the time as the z-axis scaled by this value. Most useful for dynamic obstacles. Range: 0.0 to 1.0
12.name= ~teb_init_skip_dist
12.default= 0.4
12.type= double
12.desc=Distance for skipping points while initializing elastic band Range: 0.0 to 5.0
13.name= ~global_plan_viapoint_sep
13.default= -0.1
13.type= double
13.desc=Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled] Range: -0.1 to 5.0
14.name= ~via_points_ordered
14.default= False
14.type= bool
14.desc=If true, the planner adheres to the order of via-points in the storage container 
15.name= ~max_vel_x
15.default= 0.4
15.type= double
15.desc=Maximum translational velocity of the robot Range: 0.01 to 100.0
16.name= ~max_vel_x_backwards
16.default= 0.2
16.type= double
16.desc=Maximum translational velocity of the robot for driving backwards Range: 0.01 to 100.0
17.name= ~max_vel_theta
17.default= 0.3
17.type= double
17.desc=Maximum angular velocity of the robot Range: 0.01 to 100.0
18.name= ~acc_lim_x
18.default= 0.5
18.type= double
18.desc=Maximum translational acceleration of the robot Range: 0.01 to 100.0
19.name= ~acc_lim_theta
19.default= 0.5
19.type= double
19.desc=Maximum angular acceleration of the robot Range: 0.01 to 100.0
20.name= ~is_footprint_dynamic
20.default= False
20.type= bool
20.desc=If true, updated the footprint before checking trajectory feasibility 
21.name= ~is_real
21.default= False
21.type= bool
21.desc=Whether the robot is real(or gazebo) or simulated 
22.name= ~min_turning_radius
22.default= 0.0
22.type= double
22.desc=Minimum turning radius of a carlike robot (diff-drive robot: zero) Range: 0.0 to 50.0
23.name= ~wheelbase
23.default= 1.0
23.type= double
23.desc=The distance between the drive shaft and steering axle (only required for a carlike robot with 'cmd_angle_instead_rotvel' enabled); The value might be negative for back-wheeled robots! Range: -10.0 to 10.0
24.name= ~cmd_angle_instead_rotvel
24.default= False
24.type= bool
24.desc=Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle (check 'axles_distance') 
25.name= ~max_vel_y
25.default= 0.0
25.type= double
25.desc=Maximum strafing velocity of the robot (should be zero for non-holonomic robots!) Range: 0.0 to 100.0
26.name= ~acc_lim_y
26.default= 0.5
26.type= double
26.desc=Maximum strafing acceleration of the robot Range: 0.01 to 100.0
27.name= ~max_agent_vel_x
27.default= 0.4
27.type= double
27.desc=Maximum linear velocity for agents Range: 0.0 to 4.0
28.name= ~max_agent_vel_x_backwards
28.default= 0.001
28.type= double
28.desc=Maxium backward velocity for agents Range: 0.0 to 4.0
29.name= ~max_agent_vel_theta
29.default= 0.3
29.type= double
29.desc=Maxium angular velocity for agents Range: 0.0 to 4.0
30.name= ~agent_acc_lim_x
30.default= 0.6
30.type= double
30.desc=Maxium linear acceleration for agents Range: 0.0 to 4.0
31.name= ~agent_acc_lim_theta
31.default= 0.8
31.type= double
31.desc=Maxium angular acceleration for agents Range: 0.0 to 4.0
32.name= ~num_moving_avg
32.default= 5
32.type= int
32.desc=Number of instants for moving average Range: 1 to 100
33.name= ~max_agent_vel_y
33.default= 0.4
33.type= double
33.desc=Maximum linear velocity for agents Range: 0.0 to 4.0
34.name= ~agent_acc_lim_y
34.default= 0.3
34.type= double
34.desc=Maxium linear acceleration for agents Range: 0.0 to 4.0
35.name= ~xy_goal_tolerance
35.default= 0.2
35.type= double
35.desc=Allowed final euclidean distance to the goal position Range: 0.001 to 10.0
36.name= ~yaw_goal_tolerance
36.default= 0.1
36.type= double
36.desc=Allowed final orientation error to the goal orientation Range: 0.001 to 3.2
37.name= ~complete_global_plan
37.default= False
37.type= bool
37.desc=Completely execute the global plan 
38.name= ~free_goal_vel
38.default= False
38.type= bool
38.desc=Allow the robot's velocity to be nonzero for planning purposes (the robot can arrive at the goal with max speed) 
39.name= ~min_obstacle_dist
39.default= 0.5
39.type= double
39.desc=Minimum desired separation from obstacles Range: 0.0 to 10.0
40.name= ~use_nonlinear_obstacle_penalty
40.default= True
40.type= bool
40.desc=Weather to use inverse function for obstacle penalty (linear otherwise) 
41.name= ~obstacle_cost_mult
41.default= 1.0
41.type= double
41.desc=Multiplier for obstacle cost Range: 0.0 to 10.0
42.name= ~inflation_dist
42.default= 0.6
42.type= double
42.desc=Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 15.0
43.name= ~dynamic_obstacle_inflation_dist
43.default= 0.6
43.type= double
43.desc=Buffer zone around predicted locations of dynamic obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect) Range: 0.0 to 15.0
44.name= ~include_dynamic_obstacles
44.default= True
44.type= bool
44.desc=Specify whether the movement of dynamic obstacles should be predicted by a constant velocity model (this also changes the homotopy class search). If false, all obstacles are considered to be static. 
45.name= ~include_costmap_obstacles
45.default= True
45.type= bool
45.desc=Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented) 
46.name= ~legacy_obstacle_association
46.default= False
46.type= bool
46.desc=If true, the old association strategy is used (for each obstacle, find the nearest TEB pose), otherwise the new one (for each teb pose, find only 'relevant' obstacles). 
47.name= ~obstacle_association_force_inclusion_factor
47.default= 1.5
47.type= double
47.desc=The non-legacy obstacle association technique tries to connect only relevant obstacles with the discretized trajectory during optimization, all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist), e.g. choose 2.0 in order to consider obstacles within a radius of 2.0*min_obstacle_dist. Range: 0.0 to 100.0
48.name= ~obstacle_association_cutoff_factor
48.default= 5.0
48.type= double
48.desc=See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. obstacle_association_force_inclusion_factor is processed first. Range: 1.0 to 100.0
49.name= ~costmap_obstacles_behind_robot_dist
49.default= 1.5
49.type= double
49.desc=Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters) Range: 0.0 to 20.0
50.name= ~obstacle_poses_affected
50.default= 30
50.type= int
50.desc=The obstacle position is attached to the closest pose on the trajectory to reduce computational effort, but take a number of neighbors into account as well Range: 0 to 200
51.name= ~no_inner_iterations
51.default= 5
51.type= int
51.desc=Number of solver iterations called in each outerloop iteration Range: 1 to 100
52.name= ~no_outer_iterations
52.default= 4
52.type= int
52.desc=Each outerloop iteration automatically resizes the trajectory and invokes the internal optimizer with no_inner_iterations Range: 1 to 100
53.name= ~optimization_activate
53.default= True
53.type= bool
53.desc=Activate the optimization 
54.name= ~optimization_verbose
54.default= False
54.type= bool
54.desc=Print verbose information 
55.name= ~penalty_epsilon
55.default= 0.1
55.type= double
55.desc=Add a small safty margin to penalty functions for hard-constraint approximations Range: 0.0 to 1.0
56.name= ~time_penalty_epsilon
56.default= 0.1
56.type= double
56.desc=Add a safty margin to penalty functions for time optimality contraint Range: 0.0 to 1.0
57.name= ~cap_optimaltime_penalty
57.default= True
57.type= bool
57.desc=Weather to cap optimal time penalty with initial time between teb vertices 
58.name= ~weight_max_vel_x
58.default= 2.0
58.type= double
58.desc=Optimization weight for satisfying the maximum allowed translational velocity Range: 0.0 to 1000.0
59.name= ~weight_max_vel_y
59.default= 2.0
59.type= double
59.desc=Optimization weight for satisfying the maximum allowed strafing velocity (in use only for holonomic robots) Range: 0.0 to 1000.0
60.name= ~weight_max_vel_theta
60.default= 1.0
60.type= double
60.desc=Optimization weight for satisfying the maximum allowed angular velocity Range: 0.0 to 1000.0
61.name= ~weight_acc_lim_x
61.default= 1.0
61.type= double
61.desc=Optimization weight for satisfying the maximum allowed translational acceleration Range: 0.0 to 1000.0
62.name= ~weight_acc_lim_y
62.default= 1.0
62.type= double
62.desc=Optimization weight for satisfying the maximum allowed strafing acceleration (in use only for holonomic robots) Range: 0.0 to 1000.0
63.name= ~weight_acc_lim_theta
63.default= 1.0
63.type= double
63.desc=Optimization weight for satisfying the maximum allowed angular acceleration Range: 0.0 to 1000.0
64.name= ~weight_kinematics_nh
64.default= 1000.0
64.type= double
64.desc=Optimization weight for satisfying the non-holonomic kinematics Range: 0.0 to 10000.0
65.name= ~weight_kinematics_forward_drive
65.default= 1.0
65.type= double
65.desc=Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities, only diffdrive robot) Range: 0.0 to 1000.0
66.name= ~weight_kinematics_turning_radius
66.default= 1.0
66.type= double
66.desc=Optimization weight for enforcing a minimum turning radius (carlike robots) Range: 0.0 to 1000.0
67.name= ~weight_optimaltime
67.default= 1.0
67.type= double
67.desc=Optimization weight for contracting the trajectory w.r.t. transition time Range: 0.0 to 1000.0
68.name= ~weight_shortest_path
68.default= 0.0
68.type= double
68.desc=Optimization weight for contracting the trajectory w.r.t. path length Range: 0.0 to 100.0
69.name= ~weight_obstacle
69.default= 50.0
69.type= double
69.desc=Optimization weight for satisfying a minimum seperation from obstacles Range: 0.0 to 1000.0
70.name= ~weight_inflation
70.default= 0.1
70.type= double
70.desc=Optimization weight for the inflation penalty (should be small) Range: 0.0 to 10.0
71.name= ~weight_dynamic_obstacle
71.default= 50.0
71.type= double
71.desc=Optimization weight for satisfying a minimum seperation from dynamic obstacles Range: 0.0 to 1000.0
72.name= ~weight_dynamic_obstacle_inflation
72.default= 0.1
72.type= double
72.desc=Optimization weight for the inflation penalty of dynamic obstacles (should be small) Range: 0.0 to 10.0
73.name= ~weight_viapoint
73.default= 1.0
73.type= double
73.desc=Optimization weight for minimizing the distance to via-points Range: 0.0 to 1000.0
74.name= ~weight_adapt_factor
74.default= 2.0
74.type= double
74.desc=Some special weights (currently 'weight_obstacle') are repeatedly scaled by this factor in each outer TEB iteration (weight_new: weight_old * factor); Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem. Range: 1.0 to 100.0
75.name= ~obstacle_cost_exponent
75.default= 1.0
75.type= double
75.desc=Exponent for nonlinear obstacle cost (cost = linear_cost * obstacle_cost_exponent). Set to 1 to disable nonlinear cost (default) Range: 0.01 to 100.0
76.name= ~weight_max_agent_vel_x
76.default= 0.0
76.type= double
76.desc=Optimization weight for satisfying the maximum allowed translational velocity in x axis for agent Range: 2.0 to 1000.0
77.name= ~weight_max_agent_vel_y
77.default= 0.0
77.type= double
77.desc=Optimization weight for satisfying the maximum allowed translational velocity in y axis for agent Range: 2.0 to 1000.0
78.name= ~weight_nominal_agent_vel_x
78.default= 0.0
78.type= double
78.desc=Optimization weight for satisfying the nominal translational velocity for agent Range: 2.0 to 1000.0
79.name= ~weight_max_agent_vel_theta
79.default= 0.0
79.type= double
79.desc=Optimization weight for satisfying the maximum allowed rotational velocity for agent Range: 2.0 to 1000.0
80.name= ~weight_agent_acc_lim_x
80.default= 0.0
80.type= double
80.desc=Optimization weight for satisfying the maximum allowed translational acceleration in x for agent Range: 2.0 to 1000.0
81.name= ~weight_agent_acc_lim_y
81.default= 0.0
81.type= double
81.desc=Optimization weight for satisfying the maximum allowed translational acceleration in y for agent Range: 2.0 to 1000.0
82.name= ~weight_agent_acc_lim_theta
82.default= 0.0
82.type= double
82.desc=Optimization weight for satisfying the maximum allowed rotational acceleration for agent Range: 2.0 to 1000.0
83.name= ~weight_agent_optimaltime
83.default= 1.0
83.type= double
83.desc=Optimization weight for contracting the trajectory w.r.t transition time for agent Range: 0.0 to 1000.0
84.name= ~weight_agent_viapoint
84.default= 1.0
84.type= double
84.desc=Optimization weight for minimizing the distance from agent to its via-points Range: 0.0 to 1000.0
85.name= ~weight_agent_robot_safety
85.default= 20.0
85.type= double
85.desc=Optimization weight for satisfying a minimum seperation between agent and robot Range: 0.0 to 1000.0
86.name= ~weight_agent_agent_safety
86.default= 20.0
86.type= double
86.desc=Optimization weight for satisfying a minimum seperation between each pair of agent Range: 0.0 to 1000.0
87.name= ~weight_agent_robot_rel_vel
87.default= 20.0
87.type= double
87.desc=Optimization weight for agent-robot relative velocity costs Range: 0.0 to 1000.0
88.name= ~weight_agent_robot_visibility
88.default= 20.0
88.type= double
88.desc=Optimization weight for agent-robot visibility costs Range: 0.0 to 1000.0
89.name= ~weight_invisible_human
89.default= 1.0
89.type= double
89.desc=Optimization weight for invisible humans' costs Range: 0.0 to 1000.0
90.name= ~fov
90.default= 90.0
90.type= double
90.desc=Horizontal field of view of the agent (degrees). Used for the visibility constraint. If the robot is in the field of view,the visibility constraint is 0 else it increase. Range: 0.0 to 360.0
91.name= ~disable_warm_start
91.default= False
91.type= bool
91.desc=Whether to use warm start for already initiated bands 
92.name= ~disable_rapid_omega_chage
92.default= True
92.type= bool
92.desc=Wheter to disble rapid change of omega value of controller command in post-processing 
93.name= ~omega_chage_time_seperation
93.default= 1.0
93.type= double
93.desc=Minimal amount of time to wait before allowing rapid change in omeag value for controller command in post-processing Range: 0.0 to 10.0
94.name= ~planning_mode
94.default= 1
94.type= int
94.desc=Mode under which planner should run, 0=no-agents/humans, 1=normal, 2=approach Possible values are: DisregardHumans (0): Plan without considering agents/humans in the area, HumanAware (1): Human-Aware planning with mutiple elastic bands, Approach (2): Plan for approach behavior
95.name= ~use_agent_robot_safety_c
95.default= False
95.type= bool
95.desc=Whether to use agent-robot safety constraints 
96.name= ~use_agent_agent_safety_c
96.default= True
96.type= bool
96.desc=Whether to use agent-agent safety constraints 
97.name= ~use_agent_robot_rel_vel_c
97.default= True
97.type= bool
97.desc=Whether to use agent-robot relative velocity constraints 
98.name= ~use_agent_robot_visi_c
98.default= True
98.type= bool
98.desc=Whether to use agent-robot visibility constraints 
99.name= ~add_invisible_humans
99.default= False
99.type= bool
99.desc=Whether to use invisible humans constraint or not 
100.name= ~use_agent_elastic_vel
100.default= True
100.type= bool
100.desc=Whether to use elasticity in velocity for agent 
101.name= ~min_agent_robot_dist
101.default= 0.6
101.type= double
101.desc=Minumum allowed distance between agent and robot Range: 0.0 to 5.0
102.name= ~min_agent_agent_dist
102.default= 0.2
102.type= double
102.desc=Minumum allowed distance between two agent Range: 0.0 to 5.0
103.name= ~rel_vel_cost_threshold
103.default= 5.0
103.type= double
103.desc=Threshold for relative velocity costs between agent and robot Range: 0.0 to 100.0
104.name= ~invisible_human_threshold
104.default= 1.0
104.type= double
104.desc=Threshold for invisible humans cost Range: 0.0 to 100.0
105.name= ~visibility_cost_threshold
105.default= 5.0
105.type= double
105.desc=Threshold for visibility costs between agent and robot Range: 0.0 to 100.0
106.name= ~agent_pose_prediction_reset_time
106.default= 2.0
106.type= double
106.desc=Time since last call to the planner after which agent pose prediction is resetted Range: 0.0 to 20.0
107.name= ~shrink_horizon_backup
107.default= True
107.type= bool
107.desc=Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues. 
108.name= ~oscillation_recovery
108.default= True
108.type= bool
108.desc=Try to detect and resolve oscillations between multiple solutions in the same equivalence class (robot frequently switches between left/right/forward/backwards). 
109.name= ~publish_robot_global_plan
109.default= True
109.type= bool
109.desc=Whether to publish the global robot plan. 
110.name= ~publish_robot_local_plan
110.default= True
110.type= bool
110.desc=Whether to publish the local robot plan. 
111.name= ~publish_robot_local_plan_poses
111.default= False
111.type= bool
111.desc=Whether to publish the robot local plan poses. 
112.name= ~publish_robot_local_plan_fp_poses
112.default= False
112.type= bool
112.desc=Whether to publish robot footprint at the local plan poses. 
113.name= ~publish_agents_global_plans
113.default= False
113.type= bool
113.desc=Whether to publish global agents plans. 
114.name= ~publish_agents_local_plans
114.default= True
114.type= bool
114.desc=Whether to publish the full agents optimized trajectories. 
115.name= ~publish_agents_local_plan_poses
115.default= False
115.type= bool
115.desc=Whether to publish the posed for optimized agents trajectories. 
116.name= ~publish_agents_local_plan_fp_poses
116.default= False
116.type= bool
116.desc=Whether to publish robot footprint at the posed for optimized agents trajectories. 
117.name= ~pose_array_z_scale
117.default= 1.0
117.type= double
117.desc=Multiplier to show time on z value of pose array for agents and robot Range: 0.0 to 100.0
}
}
# End of autogenerated section. You may edit below.
