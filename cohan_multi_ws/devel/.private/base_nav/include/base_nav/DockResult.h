// Generated by gencpp from file base_nav/DockResult.msg
// DO NOT EDIT!


#ifndef BASE_NAV_MESSAGE_DOCKRESULT_H
#define BASE_NAV_MESSAGE_DOCKRESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace base_nav
{
template <class ContainerAllocator>
struct DockResult_
{
  typedef DockResult_<ContainerAllocator> Type;

  DockResult_()
    : error_code(0)
    , action_end()  {
    }
  DockResult_(const ContainerAllocator& _alloc)
    : error_code(0)
    , action_end()  {
  (void)_alloc;
    }



   typedef int32_t _error_code_type;
  _error_code_type error_code;

   typedef ros::Time _action_end_type;
  _action_end_type action_end;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(NO_MAP_TO_FOOTPRINT_TRANSFORM)
  #undef NO_MAP_TO_FOOTPRINT_TRANSFORM
#endif
#if defined(_WIN32) && defined(PREEMPTED)
  #undef PREEMPTED
#endif

  enum {
    SUCCESS = 0,
    NO_MAP_TO_FOOTPRINT_TRANSFORM = -1,
    PREEMPTED = -2,
  };


  typedef boost::shared_ptr< ::base_nav::DockResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::base_nav::DockResult_<ContainerAllocator> const> ConstPtr;

}; // struct DockResult_

typedef ::base_nav::DockResult_<std::allocator<void> > DockResult;

typedef boost::shared_ptr< ::base_nav::DockResult > DockResultPtr;
typedef boost::shared_ptr< ::base_nav::DockResult const> DockResultConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::base_nav::DockResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::base_nav::DockResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::base_nav::DockResult_<ContainerAllocator1> & lhs, const ::base_nav::DockResult_<ContainerAllocator2> & rhs)
{
  return lhs.error_code == rhs.error_code &&
    lhs.action_end == rhs.action_end;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::base_nav::DockResult_<ContainerAllocator1> & lhs, const ::base_nav::DockResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace base_nav

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::base_nav::DockResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::base_nav::DockResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_nav::DockResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::base_nav::DockResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_nav::DockResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::base_nav::DockResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::base_nav::DockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc1f185eecc72325073f858a16abb3f3";
  }

  static const char* value(const ::base_nav::DockResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc1f185eecc72325ULL;
  static const uint64_t static_value2 = 0x073f858a16abb3f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::base_nav::DockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "base_nav/DockResult";
  }

  static const char* value(const ::base_nav::DockResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::base_nav::DockResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"int32 SUCCESS = 0\n"
"int32 NO_MAP_TO_FOOTPRINT_TRANSFORM = -1\n"
"int32 PREEMPTED = -2\n"
"\n"
"\n"
"int32 error_code\n"
"time action_end\n"
;
  }

  static const char* value(const ::base_nav::DockResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::base_nav::DockResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_code);
      stream.next(m.action_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DockResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::base_nav::DockResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::base_nav::DockResult_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "action_end: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.action_end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BASE_NAV_MESSAGE_DOCKRESULT_H
