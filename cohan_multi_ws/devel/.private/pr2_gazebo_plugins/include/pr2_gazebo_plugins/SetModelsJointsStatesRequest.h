// Generated by gencpp from file pr2_gazebo_plugins/SetModelsJointsStatesRequest.msg
// DO NOT EDIT!


#ifndef PR2_GAZEBO_PLUGINS_MESSAGE_SETMODELSJOINTSSTATESREQUEST_H
#define PR2_GAZEBO_PLUGINS_MESSAGE_SETMODELSJOINTSSTATESREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pr2_gazebo_plugins/ModelJointsState.h>

namespace pr2_gazebo_plugins
{
template <class ContainerAllocator>
struct SetModelsJointsStatesRequest_
{
  typedef SetModelsJointsStatesRequest_<ContainerAllocator> Type;

  SetModelsJointsStatesRequest_()
    : model_names()
    , model_joints_states()  {
    }
  SetModelsJointsStatesRequest_(const ContainerAllocator& _alloc)
    : model_names(_alloc)
    , model_joints_states(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _model_names_type;
  _model_names_type model_names;

   typedef std::vector< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >> _model_joints_states_type;
  _model_joints_states_type model_joints_states;





  typedef boost::shared_ptr< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetModelsJointsStatesRequest_

typedef ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<std::allocator<void> > SetModelsJointsStatesRequest;

typedef boost::shared_ptr< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest > SetModelsJointsStatesRequestPtr;
typedef boost::shared_ptr< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest const> SetModelsJointsStatesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator1> & lhs, const ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.model_names == rhs.model_names &&
    lhs.model_joints_states == rhs.model_joints_states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator1> & lhs, const ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pr2_gazebo_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecf71b483df7b70447575a8231727200";
  }

  static const char* value(const ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecf71b483df7b704ULL;
  static const uint64_t static_value2 = 0x47575a8231727200ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_gazebo_plugins/SetModelsJointsStatesRequest";
  }

  static const char* value(const ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] model_names                                      # name of the model\n"
"pr2_gazebo_plugins/ModelJointsState[] model_joints_states # model pose and joint positions\n"
"\n"
"================================================================================\n"
"MSG: pr2_gazebo_plugins/ModelJointsState\n"
"geometry_msgs/Pose[] model_pose                          # set as single element array if user wishes to specify model pose, otherwise, leave empty\n"
"string[] joint_names                                     # list of joint names\n"
"float64[] joint_positions                                 # list of desired joint positions, should match joint_names\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_names);
      stream.next(m.model_joints_states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetModelsJointsStatesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_gazebo_plugins::SetModelsJointsStatesRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "model_names: ";
    if (v.model_names.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.model_names.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.model_names[i]);
    }
    if (v.model_names.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "model_joints_states: ";
    if (v.model_joints_states.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.model_joints_states.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.model_joints_states[i]);
    }
    if (v.model_joints_states.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_GAZEBO_PLUGINS_MESSAGE_SETMODELSJOINTSSTATESREQUEST_H
