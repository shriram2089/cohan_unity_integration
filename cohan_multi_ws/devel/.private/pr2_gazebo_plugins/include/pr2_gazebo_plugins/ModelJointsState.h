// Generated by gencpp from file pr2_gazebo_plugins/ModelJointsState.msg
// DO NOT EDIT!


#ifndef PR2_GAZEBO_PLUGINS_MESSAGE_MODELJOINTSSTATE_H
#define PR2_GAZEBO_PLUGINS_MESSAGE_MODELJOINTSSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace pr2_gazebo_plugins
{
template <class ContainerAllocator>
struct ModelJointsState_
{
  typedef ModelJointsState_<ContainerAllocator> Type;

  ModelJointsState_()
    : model_pose()
    , joint_names()
    , joint_positions()  {
    }
  ModelJointsState_(const ContainerAllocator& _alloc)
    : model_pose(_alloc)
    , joint_names(_alloc)
    , joint_positions(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Pose_<ContainerAllocator> >> _model_pose_type;
  _model_pose_type model_pose;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_positions_type;
  _joint_positions_type joint_positions;





  typedef boost::shared_ptr< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> const> ConstPtr;

}; // struct ModelJointsState_

typedef ::pr2_gazebo_plugins::ModelJointsState_<std::allocator<void> > ModelJointsState;

typedef boost::shared_ptr< ::pr2_gazebo_plugins::ModelJointsState > ModelJointsStatePtr;
typedef boost::shared_ptr< ::pr2_gazebo_plugins::ModelJointsState const> ModelJointsStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator1> & lhs, const ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator2> & rhs)
{
  return lhs.model_pose == rhs.model_pose &&
    lhs.joint_names == rhs.joint_names &&
    lhs.joint_positions == rhs.joint_positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator1> & lhs, const ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pr2_gazebo_plugins

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f700a74958b6566fae4cd77fbb80ffd4";
  }

  static const char* value(const ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf700a74958b6566fULL;
  static const uint64_t static_value2 = 0xae4cd77fbb80ffd4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pr2_gazebo_plugins/ModelJointsState";
  }

  static const char* value(const ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose[] model_pose                          # set as single element array if user wishes to specify model pose, otherwise, leave empty\n"
"string[] joint_names                                     # list of joint names\n"
"float64[] joint_positions                                 # list of desired joint positions, should match joint_names\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_pose);
      stream.next(m.joint_names);
      stream.next(m.joint_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModelJointsState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pr2_gazebo_plugins::ModelJointsState_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "model_pose: ";
    if (v.model_pose.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.model_pose.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.model_pose[i]);
    }
    if (v.model_pose.empty() || false)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_names: ";
    if (v.joint_names.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, true ? std::string() : indent + "    ", v.joint_names[i]);
    }
    if (v.joint_names.empty() || true)
      s << "]";
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "joint_positions: ";
    if (v.joint_positions.empty() || true)
      s << "[";
    for (size_t i = 0; i < v.joint_positions.size(); ++i)
    {
      if (true && i > 0)
        s << ", ";
      else if (!true)
        s << std::endl << indent << "  -";
      Printer<double>::stream(s, true ? std::string() : indent + "    ", v.joint_positions[i]);
    }
    if (v.joint_positions.empty() || true)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // PR2_GAZEBO_PLUGINS_MESSAGE_MODELJOINTSSTATE_H
