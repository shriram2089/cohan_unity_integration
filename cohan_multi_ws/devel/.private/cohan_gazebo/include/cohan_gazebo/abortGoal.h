// Generated by gencpp from file cohan_gazebo/abortGoal.msg
// DO NOT EDIT!


#ifndef COHAN_GAZEBO_MESSAGE_ABORTGOAL_H
#define COHAN_GAZEBO_MESSAGE_ABORTGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Bool.h>

namespace cohan_gazebo
{
template <class ContainerAllocator>
struct abortGoal_
{
  typedef abortGoal_<ContainerAllocator> Type;

  abortGoal_()
    : id(0)
    , abort()  {
    }
  abortGoal_(const ContainerAllocator& _alloc)
    : id(0)
    , abort(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef  ::std_msgs::Bool_<ContainerAllocator>  _abort_type;
  _abort_type abort;





  typedef boost::shared_ptr< ::cohan_gazebo::abortGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cohan_gazebo::abortGoal_<ContainerAllocator> const> ConstPtr;

}; // struct abortGoal_

typedef ::cohan_gazebo::abortGoal_<std::allocator<void> > abortGoal;

typedef boost::shared_ptr< ::cohan_gazebo::abortGoal > abortGoalPtr;
typedef boost::shared_ptr< ::cohan_gazebo::abortGoal const> abortGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cohan_gazebo::abortGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cohan_gazebo::abortGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cohan_gazebo::abortGoal_<ContainerAllocator1> & lhs, const ::cohan_gazebo::abortGoal_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.abort == rhs.abort;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cohan_gazebo::abortGoal_<ContainerAllocator1> & lhs, const ::cohan_gazebo::abortGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cohan_gazebo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cohan_gazebo::abortGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cohan_gazebo::abortGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_gazebo::abortGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cohan_gazebo::abortGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_gazebo::abortGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cohan_gazebo::abortGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cohan_gazebo::abortGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ffb97e617eff82b1230d865ebbca3985";
  }

  static const char* value(const ::cohan_gazebo::abortGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xffb97e617eff82b1ULL;
  static const uint64_t static_value2 = 0x230d865ebbca3985ULL;
};

template<class ContainerAllocator>
struct DataType< ::cohan_gazebo::abortGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cohan_gazebo/abortGoal";
  }

  static const char* value(const ::cohan_gazebo::abortGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cohan_gazebo::abortGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64         id\n"
"std_msgs/Bool abort\n"
"================================================================================\n"
"MSG: std_msgs/Bool\n"
"bool data\n"
;
  }

  static const char* value(const ::cohan_gazebo::abortGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cohan_gazebo::abortGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.abort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct abortGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cohan_gazebo::abortGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cohan_gazebo::abortGoal_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "abort: ";
    Printer< ::std_msgs::Bool_<ContainerAllocator> >::stream(s, indent + "  ", v.abort);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COHAN_GAZEBO_MESSAGE_ABORTGOAL_H
